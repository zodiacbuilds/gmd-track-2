// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GMDvault__poolInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;
  value10: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean,
    value10: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    return map;
  }

  getLpToken(): Address {
    return this.value0;
  }

  getGDlptoken(): Address {
    return this.value1;
  }

  getEarnRateSec(): BigInt {
    return this.value2;
  }

  getTotalStaked(): BigInt {
    return this.value3;
  }

  getLastUpdate(): BigInt {
    return this.value4;
  }

  getVaultcap(): BigInt {
    return this.value5;
  }

  getGlpFees(): BigInt {
    return this.value6;
  }

  getAPR(): BigInt {
    return this.value7;
  }

  getStakable(): boolean {
    return this.value8;
  }

  getWithdrawable(): boolean {
    return this.value9;
  }

  getRewardStart(): boolean {
    return this.value10;
  }
}

export class GMDvault extends ethereum.SmartContract {
  static bind(address: Address): GMDvault {
    return new GMDvault("GMDvault", address);
  }

  EsGMX(): Address {
    let result = super.call("EsGMX", "EsGMX():(address)", []);

    return result[0].toAddress();
  }

  try_EsGMX(): ethereum.CallResult<Address> {
    let result = super.tryCall("EsGMX", "EsGMX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GDpriceToStakedtoken(_pid: BigInt): BigInt {
    let result = super.call(
      "GDpriceToStakedtoken",
      "GDpriceToStakedtoken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return result[0].toBigInt();
  }

  try_GDpriceToStakedtoken(_pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GDpriceToStakedtoken",
      "GDpriceToStakedtoken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GLPbacking(): BigInt {
    let result = super.call("GLPbacking", "GLPbacking():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GLPbacking(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GLPbacking", "GLPbacking():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GLPbackingNeeded(): BigInt {
    let result = super.call(
      "GLPbackingNeeded",
      "GLPbackingNeeded():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GLPbackingNeeded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GLPbackingNeeded",
      "GLPbackingNeeded():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GLPinVault(): BigInt {
    let result = super.call("GLPinVault", "GLPinVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_GLPinVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("GLPinVault", "GLPinVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WBTC(): Address {
    let result = super.call("WBTC", "WBTC():(address)", []);

    return result[0].toAddress();
  }

  try_WBTC(): ethereum.CallResult<Address> {
    let result = super.tryCall("WBTC", "WBTC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _GLPRouter(): Address {
    let result = super.call("_GLPRouter", "_GLPRouter():(address)", []);

    return result[0].toAddress();
  }

  try__GLPRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("_GLPRouter", "_GLPRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _RewardRouter(): Address {
    let result = super.call("_RewardRouter", "_RewardRouter():(address)", []);

    return result[0].toAddress();
  }

  try__RewardRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_RewardRouter",
      "_RewardRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  compoundPercentage(): BigInt {
    let result = super.call(
      "compoundPercentage",
      "compoundPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_compoundPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "compoundPercentage",
      "compoundPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPoolTotal(_pid: BigInt): BigInt {
    let result = super.call(
      "currentPoolTotal",
      "currentPoolTotal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return result[0].toBigInt();
  }

  try_currentPoolTotal(_pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentPoolTotal",
      "currentPoolTotal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  displayStakedBalance(_address: Address, _pid: BigInt): BigInt {
    let result = super.call(
      "displayStakedBalance",
      "displayStakedBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_pid)
      ]
    );

    return result[0].toBigInt();
  }

  try_displayStakedBalance(
    _address: Address,
    _pid: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "displayStakedBalance",
      "displayStakedBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromUnsignedBigInt(_pid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fsGLP(): Address {
    let result = super.call("fsGLP", "fsGLP():(address)", []);

    return result[0].toAddress();
  }

  try_fsGLP(): ethereum.CallResult<Address> {
    let result = super.tryCall("fsGLP", "fsGLP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gdUSDC(): Address {
    let result = super.call("gdUSDC", "gdUSDC():(address)", []);

    return result[0].toAddress();
  }

  try_gdUSDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("gdUSDC", "gdUSDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  leave(_share: BigInt, _pid: BigInt): BigInt {
    let result = super.call("leave", "leave(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_share),
      ethereum.Value.fromUnsignedBigInt(_pid)
    ]);

    return result[0].toBigInt();
  }

  try_leave(_share: BigInt, _pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("leave", "leave(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_share),
      ethereum.Value.fromUnsignedBigInt(_pid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolInfo(param0: BigInt): GMDvault__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GMDvault__poolInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean(),
      result[10].toBoolean()
    );
  }

  try_poolInfo(param0: BigInt): ethereum.CallResult<GMDvault__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GMDvault__poolInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean(),
        value[10].toBoolean()
      )
    );
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  slippage(): BigInt {
    let result = super.call("slippage", "slippage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slippage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slippage", "slippage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapGLPout(_amount: BigInt, token: Address, min_receive: BigInt): BigInt {
    let result = super.call(
      "swapGLPout",
      "swapGLPout(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(min_receive)
      ]
    );

    return result[0].toBigInt();
  }

  try_swapGLPout(
    _amount: BigInt,
    token: Address,
    min_receive: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapGLPout",
      "swapGLPout(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(min_receive)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUSDvault(_pid: BigInt): BigInt {
    let result = super.call(
      "totalUSDvault",
      "totalUSDvault(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return result[0].toBigInt();
  }

  try_totalUSDvault(_pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUSDvault",
      "totalUSDvault(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUSDvaults(): BigInt {
    let result = super.call("totalUSDvaults", "totalUSDvaults():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUSDvaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUSDvaults",
      "totalUSDvaults():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryMintedGLP(): BigInt {
    let result = super.call(
      "treasuryMintedGLP",
      "treasuryMintedGLP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_treasuryMintedGLP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryMintedGLP",
      "treasuryMintedGLP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateGLPbackingNeeded(): BigInt {
    let result = super.call(
      "updateGLPbackingNeeded",
      "updateGLPbackingNeeded():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateGLPbackingNeeded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateGLPbackingNeeded",
      "updateGLPbackingNeeded():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gdUSDC(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _gdETH(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gdBTC(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPoolCall extends ethereum.Call {
  get inputs(): AddPoolCall__Inputs {
    return new AddPoolCall__Inputs(this);
  }

  get outputs(): AddPoolCall__Outputs {
    return new AddPoolCall__Outputs(this);
  }
}

export class AddPoolCall__Inputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }

  get _lptoken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _GDlptoken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _fees(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _apr(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddPoolCall__Outputs {
  _call: AddPoolCall;

  constructor(call: AddPoolCall) {
    this._call = call;
  }
}

export class ConvertDustCall extends ethereum.Call {
  get inputs(): ConvertDustCall__Inputs {
    return new ConvertDustCall__Inputs(this);
  }

  get outputs(): ConvertDustCall__Outputs {
    return new ConvertDustCall__Outputs(this);
  }
}

export class ConvertDustCall__Inputs {
  _call: ConvertDustCall;

  constructor(call: ConvertDustCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConvertDustCall__Outputs {
  _call: ConvertDustCall;

  constructor(call: ConvertDustCall) {
    this._call = call;
  }
}

export class CycleRewardsETHCall extends ethereum.Call {
  get inputs(): CycleRewardsETHCall__Inputs {
    return new CycleRewardsETHCall__Inputs(this);
  }

  get outputs(): CycleRewardsETHCall__Outputs {
    return new CycleRewardsETHCall__Outputs(this);
  }
}

export class CycleRewardsETHCall__Inputs {
  _call: CycleRewardsETHCall;

  constructor(call: CycleRewardsETHCall) {
    this._call = call;
  }
}

export class CycleRewardsETHCall__Outputs {
  _call: CycleRewardsETHCall;

  constructor(call: CycleRewardsETHCall) {
    this._call = call;
  }
}

export class CycleRewardsETHandEsGMXCall extends ethereum.Call {
  get inputs(): CycleRewardsETHandEsGMXCall__Inputs {
    return new CycleRewardsETHandEsGMXCall__Inputs(this);
  }

  get outputs(): CycleRewardsETHandEsGMXCall__Outputs {
    return new CycleRewardsETHandEsGMXCall__Outputs(this);
  }
}

export class CycleRewardsETHandEsGMXCall__Inputs {
  _call: CycleRewardsETHandEsGMXCall;

  constructor(call: CycleRewardsETHandEsGMXCall) {
    this._call = call;
  }
}

export class CycleRewardsETHandEsGMXCall__Outputs {
  _call: CycleRewardsETHandEsGMXCall;

  constructor(call: CycleRewardsETHandEsGMXCall) {
    this._call = call;
  }
}

export class EnterCall extends ethereum.Call {
  get inputs(): EnterCall__Inputs {
    return new EnterCall__Inputs(this);
  }

  get outputs(): EnterCall__Outputs {
    return new EnterCall__Outputs(this);
  }
}

export class EnterCall__Inputs {
  _call: EnterCall;

  constructor(call: EnterCall) {
    this._call = call;
  }

  get _amountin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnterCall__Outputs {
  _call: EnterCall;

  constructor(call: EnterCall) {
    this._call = call;
  }
}

export class EnterETHCall extends ethereum.Call {
  get inputs(): EnterETHCall__Inputs {
    return new EnterETHCall__Inputs(this);
  }

  get outputs(): EnterETHCall__Outputs {
    return new EnterETHCall__Outputs(this);
  }
}

export class EnterETHCall__Inputs {
  _call: EnterETHCall;

  constructor(call: EnterETHCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterETHCall__Outputs {
  _call: EnterETHCall;

  constructor(call: EnterETHCall) {
    this._call = call;
  }
}

export class LeaveCall extends ethereum.Call {
  get inputs(): LeaveCall__Inputs {
    return new LeaveCall__Inputs(this);
  }

  get outputs(): LeaveCall__Outputs {
    return new LeaveCall__Outputs(this);
  }
}

export class LeaveCall__Inputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }

  get _share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LeaveCall__Outputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LeaveETHCall extends ethereum.Call {
  get inputs(): LeaveETHCall__Inputs {
    return new LeaveETHCall__Inputs(this);
  }

  get outputs(): LeaveETHCall__Outputs {
    return new LeaveETHCall__Outputs(this);
  }
}

export class LeaveETHCall__Inputs {
  _call: LeaveETHCall;

  constructor(call: LeaveETHCall) {
    this._call = call;
  }

  get _share(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LeaveETHCall__Outputs {
  _call: LeaveETHCall;

  constructor(call: LeaveETHCall) {
    this._call = call;
  }
}

export class OpenAllWithdrawCall extends ethereum.Call {
  get inputs(): OpenAllWithdrawCall__Inputs {
    return new OpenAllWithdrawCall__Inputs(this);
  }

  get outputs(): OpenAllWithdrawCall__Outputs {
    return new OpenAllWithdrawCall__Outputs(this);
  }
}

export class OpenAllWithdrawCall__Inputs {
  _call: OpenAllWithdrawCall;

  constructor(call: OpenAllWithdrawCall) {
    this._call = call;
  }

  get open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class OpenAllWithdrawCall__Outputs {
  _call: OpenAllWithdrawCall;

  constructor(call: OpenAllWithdrawCall) {
    this._call = call;
  }
}

export class OpenWithdrawCall extends ethereum.Call {
  get inputs(): OpenWithdrawCall__Inputs {
    return new OpenWithdrawCall__Inputs(this);
  }

  get outputs(): OpenWithdrawCall__Outputs {
    return new OpenWithdrawCall__Outputs(this);
  }
}

export class OpenWithdrawCall__Inputs {
  _call: OpenWithdrawCall;

  constructor(call: OpenWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get open(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class OpenWithdrawCall__Outputs {
  _call: OpenWithdrawCall;

  constructor(call: OpenWithdrawCall) {
    this._call = call;
  }
}

export class PauseRewardCall extends ethereum.Call {
  get inputs(): PauseRewardCall__Inputs {
    return new PauseRewardCall__Inputs(this);
  }

  get outputs(): PauseRewardCall__Outputs {
    return new PauseRewardCall__Outputs(this);
  }
}

export class PauseRewardCall__Inputs {
  _call: PauseRewardCall;

  constructor(call: PauseRewardCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseRewardCall__Outputs {
  _call: PauseRewardCall;

  constructor(call: PauseRewardCall) {
    this._call = call;
  }
}

export class RecoverTreasuryTokensCall extends ethereum.Call {
  get inputs(): RecoverTreasuryTokensCall__Inputs {
    return new RecoverTreasuryTokensCall__Inputs(this);
  }

  get outputs(): RecoverTreasuryTokensCall__Outputs {
    return new RecoverTreasuryTokensCall__Outputs(this);
  }
}

export class RecoverTreasuryTokensCall__Inputs {
  _call: RecoverTreasuryTokensCall;

  constructor(call: RecoverTreasuryTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverTreasuryTokensCall__Outputs {
  _call: RecoverTreasuryTokensCall;

  constructor(call: RecoverTreasuryTokensCall) {
    this._call = call;
  }
}

export class RecoverTreasuryTokensFromGLPCall extends ethereum.Call {
  get inputs(): RecoverTreasuryTokensFromGLPCall__Inputs {
    return new RecoverTreasuryTokensFromGLPCall__Inputs(this);
  }

  get outputs(): RecoverTreasuryTokensFromGLPCall__Outputs {
    return new RecoverTreasuryTokensFromGLPCall__Outputs(this);
  }
}

export class RecoverTreasuryTokensFromGLPCall__Inputs {
  _call: RecoverTreasuryTokensFromGLPCall;

  constructor(call: RecoverTreasuryTokensFromGLPCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get GLPamount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverTreasuryTokensFromGLPCall__Outputs {
  _call: RecoverTreasuryTokensFromGLPCall;

  constructor(call: RecoverTreasuryTokensFromGLPCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAPRCall extends ethereum.Call {
  get inputs(): SetAPRCall__Inputs {
    return new SetAPRCall__Inputs(this);
  }

  get outputs(): SetAPRCall__Outputs {
    return new SetAPRCall__Outputs(this);
  }
}

export class SetAPRCall__Inputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _apr(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAPRCall__Outputs {
  _call: SetAPRCall;

  constructor(call: SetAPRCall) {
    this._call = call;
  }
}

export class SetCompoundPercentageCall extends ethereum.Call {
  get inputs(): SetCompoundPercentageCall__Inputs {
    return new SetCompoundPercentageCall__Inputs(this);
  }

  get outputs(): SetCompoundPercentageCall__Outputs {
    return new SetCompoundPercentageCall__Outputs(this);
  }
}

export class SetCompoundPercentageCall__Inputs {
  _call: SetCompoundPercentageCall;

  constructor(call: SetCompoundPercentageCall) {
    this._call = call;
  }

  get _percent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCompoundPercentageCall__Outputs {
  _call: SetCompoundPercentageCall;

  constructor(call: SetCompoundPercentageCall) {
    this._call = call;
  }
}

export class SetGLPFeesCall extends ethereum.Call {
  get inputs(): SetGLPFeesCall__Inputs {
    return new SetGLPFeesCall__Inputs(this);
  }

  get outputs(): SetGLPFeesCall__Outputs {
    return new SetGLPFeesCall__Outputs(this);
  }
}

export class SetGLPFeesCall__Inputs {
  _call: SetGLPFeesCall;

  constructor(call: SetGLPFeesCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _percent(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetGLPFeesCall__Outputs {
  _call: SetGLPFeesCall;

  constructor(call: SetGLPFeesCall) {
    this._call = call;
  }
}

export class SetOpenAllVaultCall extends ethereum.Call {
  get inputs(): SetOpenAllVaultCall__Inputs {
    return new SetOpenAllVaultCall__Inputs(this);
  }

  get outputs(): SetOpenAllVaultCall__Outputs {
    return new SetOpenAllVaultCall__Outputs(this);
  }
}

export class SetOpenAllVaultCall__Inputs {
  _call: SetOpenAllVaultCall;

  constructor(call: SetOpenAllVaultCall) {
    this._call = call;
  }

  get open(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetOpenAllVaultCall__Outputs {
  _call: SetOpenAllVaultCall;

  constructor(call: SetOpenAllVaultCall) {
    this._call = call;
  }
}

export class SetOpenVaultCall extends ethereum.Call {
  get inputs(): SetOpenVaultCall__Inputs {
    return new SetOpenVaultCall__Inputs(this);
  }

  get outputs(): SetOpenVaultCall__Outputs {
    return new SetOpenVaultCall__Outputs(this);
  }
}

export class SetOpenVaultCall__Inputs {
  _call: SetOpenVaultCall;

  constructor(call: SetOpenVaultCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get open(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOpenVaultCall__Outputs {
  _call: SetOpenVaultCall;

  constructor(call: SetOpenVaultCall) {
    this._call = call;
  }
}

export class SetPoolCapCall extends ethereum.Call {
  get inputs(): SetPoolCapCall__Inputs {
    return new SetPoolCapCall__Inputs(this);
  }

  get outputs(): SetPoolCapCall__Outputs {
    return new SetPoolCapCall__Outputs(this);
  }
}

export class SetPoolCapCall__Inputs {
  _call: SetPoolCapCall;

  constructor(call: SetPoolCapCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vaultcap(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPoolCapCall__Outputs {
  _call: SetPoolCapCall;

  constructor(call: SetPoolCapCall) {
    this._call = call;
  }
}

export class SetSlippageCall extends ethereum.Call {
  get inputs(): SetSlippageCall__Inputs {
    return new SetSlippageCall__Inputs(this);
  }

  get outputs(): SetSlippageCall__Outputs {
    return new SetSlippageCall__Outputs(this);
  }
}

export class SetSlippageCall__Inputs {
  _call: SetSlippageCall;

  constructor(call: SetSlippageCall) {
    this._call = call;
  }

  get _slippage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSlippageCall__Outputs {
  _call: SetSlippageCall;

  constructor(call: SetSlippageCall) {
    this._call = call;
  }
}

export class StartRewardCall extends ethereum.Call {
  get inputs(): StartRewardCall__Inputs {
    return new StartRewardCall__Inputs(this);
  }

  get outputs(): StartRewardCall__Outputs {
    return new StartRewardCall__Outputs(this);
  }
}

export class StartRewardCall__Inputs {
  _call: StartRewardCall;

  constructor(call: StartRewardCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartRewardCall__Outputs {
  _call: StartRewardCall;

  constructor(call: StartRewardCall) {
    this._call = call;
  }
}

export class SwapGLPoutCall extends ethereum.Call {
  get inputs(): SwapGLPoutCall__Inputs {
    return new SwapGLPoutCall__Inputs(this);
  }

  get outputs(): SwapGLPoutCall__Outputs {
    return new SwapGLPoutCall__Outputs(this);
  }
}

export class SwapGLPoutCall__Inputs {
  _call: SwapGLPoutCall;

  constructor(call: SwapGLPoutCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get min_receive(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SwapGLPoutCall__Outputs {
  _call: SwapGLPoutCall;

  constructor(call: SwapGLPoutCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TreasuryMintCall extends ethereum.Call {
  get inputs(): TreasuryMintCall__Inputs {
    return new TreasuryMintCall__Inputs(this);
  }

  get outputs(): TreasuryMintCall__Outputs {
    return new TreasuryMintCall__Outputs(this);
  }
}

export class TreasuryMintCall__Inputs {
  _call: TreasuryMintCall;

  constructor(call: TreasuryMintCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TreasuryMintCall__Outputs {
  _call: TreasuryMintCall;

  constructor(call: TreasuryMintCall) {
    this._call = call;
  }
}

export class UpdateGLPbackingNeededCall extends ethereum.Call {
  get inputs(): UpdateGLPbackingNeededCall__Inputs {
    return new UpdateGLPbackingNeededCall__Inputs(this);
  }

  get outputs(): UpdateGLPbackingNeededCall__Outputs {
    return new UpdateGLPbackingNeededCall__Outputs(this);
  }
}

export class UpdateGLPbackingNeededCall__Inputs {
  _call: UpdateGLPbackingNeededCall;

  constructor(call: UpdateGLPbackingNeededCall) {
    this._call = call;
  }
}

export class UpdateGLPbackingNeededCall__Outputs {
  _call: UpdateGLPbackingNeededCall;

  constructor(call: UpdateGLPbackingNeededCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateOracleCall extends ethereum.Call {
  get inputs(): UpdateOracleCall__Inputs {
    return new UpdateOracleCall__Inputs(this);
  }

  get outputs(): UpdateOracleCall__Outputs {
    return new UpdateOracleCall__Outputs(this);
  }
}

export class UpdateOracleCall__Inputs {
  _call: UpdateOracleCall;

  constructor(call: UpdateOracleCall) {
    this._call = call;
  }

  get _newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateOracleCall__Outputs {
  _call: UpdateOracleCall;

  constructor(call: UpdateOracleCall) {
    this._call = call;
  }
}

export class UpdateRewardRouterCall extends ethereum.Call {
  get inputs(): UpdateRewardRouterCall__Inputs {
    return new UpdateRewardRouterCall__Inputs(this);
  }

  get outputs(): UpdateRewardRouterCall__Outputs {
    return new UpdateRewardRouterCall__Outputs(this);
  }
}

export class UpdateRewardRouterCall__Inputs {
  _call: UpdateRewardRouterCall;

  constructor(call: UpdateRewardRouterCall) {
    this._call = call;
  }

  get _newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRewardRouterCall__Outputs {
  _call: UpdateRewardRouterCall;

  constructor(call: UpdateRewardRouterCall) {
    this._call = call;
  }
}

export class UpdateRouterCall extends ethereum.Call {
  get inputs(): UpdateRouterCall__Inputs {
    return new UpdateRouterCall__Inputs(this);
  }

  get outputs(): UpdateRouterCall__Outputs {
    return new UpdateRouterCall__Outputs(this);
  }
}

export class UpdateRouterCall__Inputs {
  _call: UpdateRouterCall;

  constructor(call: UpdateRouterCall) {
    this._call = call;
  }

  get _newRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRouterCall__Outputs {
  _call: UpdateRouterCall;

  constructor(call: UpdateRouterCall) {
    this._call = call;
  }
}

export class UpdatepoolGLPCall extends ethereum.Call {
  get inputs(): UpdatepoolGLPCall__Inputs {
    return new UpdatepoolGLPCall__Inputs(this);
  }

  get outputs(): UpdatepoolGLPCall__Outputs {
    return new UpdatepoolGLPCall__Outputs(this);
  }
}

export class UpdatepoolGLPCall__Inputs {
  _call: UpdatepoolGLPCall;

  constructor(call: UpdatepoolGLPCall) {
    this._call = call;
  }

  get _newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatepoolGLPCall__Outputs {
  _call: UpdatepoolGLPCall;

  constructor(call: UpdatepoolGLPCall) {
    this._call = call;
  }
}
